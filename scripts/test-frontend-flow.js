const fetch = require('node-fetch');

async function testFrontendFlow() {
  console.log('üß™ Probando flujo completo desde frontend...\n');

  const baseUrl = 'http://localhost:3000';
  const testEmail = 'test@example.com';

  try {
    // Paso 1: Login (enviar email)
    console.log('1. Enviando solicitud de login...');
    const loginResponse = await fetch(`${baseUrl}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email: testEmail }),
    });

    const loginData = await loginResponse.json();
    console.log('   Respuesta login:', loginData);

    if (!loginData.success) {
      console.log('   ‚ùå Error en login');
      return;
    }

    // Paso 2: Verificar c√≥digos almacenados
    console.log('\n2. Verificando c√≥digos almacenados...');
    const codesResponse = await fetch(`${baseUrl}/api/debug/codes`);
    const codesData = await codesResponse.json();
    console.log('   C√≥digos almacenados:', codesData);

    // Paso 3: Obtener c√≥digo del servidor (en desarrollo)
    const storedCodes = codesData.codes;
    const userCode = storedCodes[testEmail];
    
    if (!userCode) {
      console.log('   ‚ùå No se encontr√≥ c√≥digo para el usuario');
      return;
    }

    console.log(`   ‚úÖ C√≥digo encontrado: ${userCode.code}`);

    // Paso 4: Verificar c√≥digo
    console.log('\n3. Verificando c√≥digo...');
    const verifyResponse = await fetch(`${baseUrl}/api/auth/verify-code`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        email: testEmail, 
        code: userCode.code 
      }),
    });

    const verifyData = await verifyResponse.json();
    console.log('   Respuesta verificaci√≥n:', verifyData);

    if (verifyData.success) {
      console.log('   ‚úÖ Verificaci√≥n exitosa');
      console.log(`   üë§ Usuario: ${verifyData.user.email}`);
      console.log(`   üîë Token: ${verifyData.token.substring(0, 20)}...`);
    } else {
      console.log('   ‚ùå Error en verificaci√≥n');
    }

  } catch (error) {
    console.error('Error en prueba:', error.message);
  }
}

// Verificar si el servidor est√° ejecut√°ndose
async function checkServer() {
  try {
    const response = await fetch('http://localhost:3000');
    console.log('‚úÖ Servidor ejecut√°ndose en http://localhost:3000');
    return true;
  } catch (error) {
    console.log('‚ùå Servidor no est√° ejecut√°ndose');
    console.log('üí° Ejecuta: npm run dev');
    return false;
  }
}

async function main() {
  const serverRunning = await checkServer();
  if (serverRunning) {
    await testFrontendFlow();
  }
}

main(); 
require('dotenv').config({ path: '.env.local' });

const { MongoClient } = require('mongodb');

// Simular las funciones de autenticaci√≥n
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
const verificationCodes = new Map();

const generateVerificationCode = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

async function testVerificationFlow() {
  console.log('üß™ Probando flujo de verificaci√≥n de c√≥digo...\n');

  const testEmail = 'test@example.com';
  
  // Paso 1: Generar c√≥digo
  console.log('1. Generando c√≥digo de verificaci√≥n...');
  const code = generateVerificationCode();
  const expiresAt = new Date(Date.now() + 10 * 60 * 1000);
  
  verificationCodes.set(testEmail, { code, expiresAt });
  console.log(`   ‚úÖ C√≥digo generado: ${code}`);
  console.log(`   ‚è∞ Expira: ${expiresAt}`);

  // Paso 2: Verificar c√≥digo correcto
  console.log('\n2. Verificando c√≥digo correcto...');
  const storedData = verificationCodes.get(testEmail);
  
  if (storedData && storedData.code === code) {
    console.log('   ‚úÖ C√≥digo verificado correctamente');
    verificationCodes.delete(testEmail);
  } else {
    console.log('   ‚ùå Error en verificaci√≥n');
    return;
  }

  // Paso 3: Verificar c√≥digo incorrecto
  console.log('\n3. Verificando c√≥digo incorrecto...');
  const wrongCode = '999999';
  const storedData2 = verificationCodes.get(testEmail);
  
  if (!storedData2) {
    console.log('   ‚úÖ C√≥digo ya fue eliminado (correcto)');
  } else {
    console.log('   ‚ùå C√≥digo no fue eliminado');
  }

  // Paso 4: Probar MongoDB
  console.log('\n4. Probando conexi√≥n a MongoDB...');
  try {
    const client = new MongoClient(process.env.MONGODB_URI);
    await client.connect();
    const db = client.db();
    const usersCollection = db.collection('users');
    
    // Buscar usuario de prueba
    const user = await usersCollection.findOne({ email: testEmail });
    
    if (user) {
      console.log(`   ‚úÖ Usuario encontrado: ${user.email} (rol: ${user.role})`);
    } else {
      console.log('   ‚ÑπÔ∏è  Usuario no encontrado (normal para primera prueba)');
    }
    
    await client.close();
  } catch (error) {
    console.log('   ‚ùå Error de MongoDB:', error.message);
  }

  // Paso 5: Probar JWT
  console.log('\n5. Probando generaci√≥n de JWT...');
  try {
    const jwt = require('jsonwebtoken');
    const token = jwt.sign(
      { userId: 'test123', email: testEmail, role: 'user' },
      JWT_SECRET,
      { expiresIn: '7d' }
    );
    console.log('   ‚úÖ JWT generado correctamente');
    console.log(`   üîë Token: ${token.substring(0, 20)}...`);
  } catch (error) {
    console.log('   ‚ùå Error generando JWT:', error.message);
  }

  console.log('\n‚úÖ Prueba completada. El sistema de verificaci√≥n funciona correctamente.');
}

testVerificationFlow().catch(console.error); 